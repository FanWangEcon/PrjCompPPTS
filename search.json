[{"path":[]},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_dev_child_teacher_ratio.html","id":"three-core-files","dir":"Articles","previous_headings":"Algorithm outline","what":"Three core files","title":"Develop level ratio change elasticity functions","text":"follow steps , produces three separable files, merge together. file’s unit observation ultimately locType x loc Step 1 file, levels ratios, flr: Start long file, keep locations location types, select subst years, select teachers, schools, students, youthpop different ratios can constructed, levels want kept unit obs: locType x loc x time Teacher student: var_rat_t2s Teacher youthpop: var_rat_t2y School student: var_rat_s2s School youthpop: var_rat_sty Step 2 file, percentage change, fpc, also contains levels: unit obs: locType x loc x time x var(level/change) Generate ranks, grouped locType x loc x time x var(level/change) unit obs: locType x loc x var(level/change) 1980 2020 change 80 00, 00 20 Step 3 file, elasticity, fel: fpc, keep percentage changes stats vars, drop level rank vars unit obs: locType x loc x vars(level/change) x changeSpan unit obs: locType x loc x changeSpan ELASTICITY: ratio percentage changes across vars unit obs: locType x loc x vars, year spans columns","code":""},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_dev_child_teacher_ratio.html","id":"output-file","dir":"Articles","previous_headings":"Algorithm outline","what":"Output file","title":"Develop level ratio change elasticity functions","text":"now proceed outline development tables relevant different components paper, corresponding paper section. Global changes youth population table: file flr, keep levels 1960, 80, 00, 20, country + 7 regions fpc, changes 60t80, 80t20, 00t20, country + 7 regions file flr, keep ranks 1960, 20, country + 7 regions Group region type region, sort country, 9 variable/column table Global children teachers file, two versions, pupil- children-based separately: Unit observation: country selected years var country var (3) children teacher ratio 1980, 2000, 2020: fpc, select level col ratio rows var (3) children teacher ranking 1980 vs 2020: fpc, select level col ranks row var (1) children teacher ratio change time 1980 2020: fpc, select change col ratio row var (1) percentage change children 1980 2020: fpc, select change col level row var (1) percentage change teachers 1980 2020: fpc, select change col level row var (1) teacher-children elasticity time: fel, select changeSpan row Teachers Schools vs children pupil sub-regions.","code":""},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_dev_child_teacher_ratio.html","id":"load-data-inputs-and-review","dir":"Articles","previous_headings":"","what":"Load data inputs and review","title":"Develop level ratio change elasticity functions","text":"load key file load global population data. review unique values variables. get unique “variable” values, drop enroll_ratio Conduct basic sorting common operations file.","code":"ppts_code_wrk <- ppts_country_code ppts_wrk <- ppts_easia_weuro_world_pchg colnames(ppts_wrk) #> [1] \"location_code\"  \"location_level\" \"variable\"       \"year_bins_type\" #> [5] \"year_bins\"      \"pchg\"           \"pchg_interp1\"   \"value\"          #> [9] \"value_interp1\" print(ppts_wrk %>% distinct(variable)) #> # A tibble: 5 × 1 #>   variable #>   <fct>    #> 1 gdp      #> 2 student  #> 3 teacher  #> 4 youthpop #> 5 school print(ppts_wrk %>% distinct(location_level)) #> # A tibble: 4 × 1 #>   location_level #>   <fct>          #> 1 country        #> 2 multicountry   #> 3 multiprovince  #> 4 province print(ppts_wrk %>% distinct(year_bins_type)) #> # A tibble: 5 × 1 #>   year_bins_type #>   <fct>          #> 1 1920t2020i05   #> 2 1920t2020i10   #> 3 1920t2020i20   #> 4 1925t2015i15   #> 5 1940t2020i01 print(ppts_wrk %>% distinct(year_bins, year_bins_type) %>%   arrange(year_bins_type, year_bins), n = 200) #> # A tibble: 139 × 2 #>     year_bins year_bins_type #>     <chr>     <fct>          #>   1 1921-1925 1920t2020i05   #>   2 1926-1930 1920t2020i05   #>   3 1931-1935 1920t2020i05   #>   4 1936-1940 1920t2020i05   #>   5 1941-1945 1920t2020i05   #>   6 1946-1950 1920t2020i05   #>   7 1951-1955 1920t2020i05   #>   8 1956-1960 1920t2020i05   #>   9 1961-1965 1920t2020i05   #>  10 1966-1970 1920t2020i05   #>  11 1971-1975 1920t2020i05   #>  12 1976-1980 1920t2020i05   #>  13 1981-1985 1920t2020i05   #>  14 1986-1990 1920t2020i05   #>  15 1991-1995 1920t2020i05   #>  16 1996-2000 1920t2020i05   #>  17 2001-2005 1920t2020i05   #>  18 2006-2010 1920t2020i05   #>  19 2011-2015 1920t2020i05   #>  20 2016-2020 1920t2020i05   #>  21 1921-1930 1920t2020i10   #>  22 1931-1940 1920t2020i10   #>  23 1941-1950 1920t2020i10   #>  24 1951-1960 1920t2020i10   #>  25 1961-1970 1920t2020i10   #>  26 1971-1980 1920t2020i10   #>  27 1981-1990 1920t2020i10   #>  28 1991-2000 1920t2020i10   #>  29 2001-2010 1920t2020i10   #>  30 2011-2020 1920t2020i10   #>  31 1921-1940 1920t2020i20   #>  32 1941-1960 1920t2020i20   #>  33 1961-1980 1920t2020i20   #>  34 1981-2000 1920t2020i20   #>  35 2001-2020 1920t2020i20   #>  36 1926-1940 1925t2015i15   #>  37 1941-1955 1925t2015i15   #>  38 1956-1970 1925t2015i15   #>  39 1971-1985 1925t2015i15   #>  40 1986-2000 1925t2015i15   #>  41 2001-2015 1925t2015i15   #>  42 1923      1940t2020i01   #>  43 1924      1940t2020i01   #>  44 1925      1940t2020i01   #>  45 1926      1940t2020i01   #>  46 1927      1940t2020i01   #>  47 1928      1940t2020i01   #>  48 1929      1940t2020i01   #>  49 1930      1940t2020i01   #>  50 1931      1940t2020i01   #>  51 1932      1940t2020i01   #>  52 1933      1940t2020i01   #>  53 1934      1940t2020i01   #>  54 1935      1940t2020i01   #>  55 1936      1940t2020i01   #>  56 1937      1940t2020i01   #>  57 1938      1940t2020i01   #>  58 1939      1940t2020i01   #>  59 1940      1940t2020i01   #>  60 1941      1940t2020i01   #>  61 1942      1940t2020i01   #>  62 1943      1940t2020i01   #>  63 1944      1940t2020i01   #>  64 1945      1940t2020i01   #>  65 1946      1940t2020i01   #>  66 1947      1940t2020i01   #>  67 1948      1940t2020i01   #>  68 1949      1940t2020i01   #>  69 1950      1940t2020i01   #>  70 1951      1940t2020i01   #>  71 1952      1940t2020i01   #>  72 1953      1940t2020i01   #>  73 1954      1940t2020i01   #>  74 1955      1940t2020i01   #>  75 1956      1940t2020i01   #>  76 1957      1940t2020i01   #>  77 1958      1940t2020i01   #>  78 1959      1940t2020i01   #>  79 1960      1940t2020i01   #>  80 1961      1940t2020i01   #>  81 1962      1940t2020i01   #>  82 1963      1940t2020i01   #>  83 1964      1940t2020i01   #>  84 1965      1940t2020i01   #>  85 1966      1940t2020i01   #>  86 1967      1940t2020i01   #>  87 1968      1940t2020i01   #>  88 1969      1940t2020i01   #>  89 1970      1940t2020i01   #>  90 1971      1940t2020i01   #>  91 1972      1940t2020i01   #>  92 1973      1940t2020i01   #>  93 1974      1940t2020i01   #>  94 1975      1940t2020i01   #>  95 1976      1940t2020i01   #>  96 1977      1940t2020i01   #>  97 1978      1940t2020i01   #>  98 1979      1940t2020i01   #>  99 1980      1940t2020i01   #> 100 1981      1940t2020i01   #> 101 1982      1940t2020i01   #> 102 1983      1940t2020i01   #> 103 1984      1940t2020i01   #> 104 1985      1940t2020i01   #> 105 1986      1940t2020i01   #> 106 1987      1940t2020i01   #> 107 1988      1940t2020i01   #> 108 1989      1940t2020i01   #> 109 1990      1940t2020i01   #> 110 1991      1940t2020i01   #> 111 1992      1940t2020i01   #> 112 1993      1940t2020i01   #> 113 1994      1940t2020i01   #> 114 1995      1940t2020i01   #> 115 1996      1940t2020i01   #> 116 1997      1940t2020i01   #> 117 1998      1940t2020i01   #> 118 1999      1940t2020i01   #> 119 2000      1940t2020i01   #> 120 2001      1940t2020i01   #> 121 2002      1940t2020i01   #> 122 2003      1940t2020i01   #> 123 2004      1940t2020i01   #> 124 2005      1940t2020i01   #> 125 2006      1940t2020i01   #> 126 2007      1940t2020i01   #> 127 2008      1940t2020i01   #> 128 2009      1940t2020i01   #> 129 2010      1940t2020i01   #> 130 2011      1940t2020i01   #> 131 2012      1940t2020i01   #> 132 2013      1940t2020i01   #> 133 2014      1940t2020i01   #> 134 2015      1940t2020i01   #> 135 2016      1940t2020i01   #> 136 2017      1940t2020i01   #> 137 2018      1940t2020i01   #> 138 2019      1940t2020i01   #> 139 2020      1940t2020i01 ar_st_vars <- unique(ppts_wrk %>% pull(variable)) ar_year_bins_type <- unique(ppts_wrk %>% pull(year_bins_type)) print(ar_st_vars) #> [1] gdp      student  teacher  youthpop school   #> Levels: gdp school student teacher youthpop print(ar_year_bins_type) #> [1] 1920t2020i05 1920t2020i10 1920t2020i20 1925t2015i15 1940t2020i01 #> Levels: 1920t2020i05 1920t2020i10 1920t2020i20 1925t2015i15 1940t2020i01 ppts_wrk <- ppts_wrk %>%   arrange(location_level, location_code, year_bins) # %>% # filter(!(location_level %in% c(\"province\", \"multiprovince\")))"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_dev_child_teacher_ratio.html","id":"implement-flr-file","dir":"Articles","previous_headings":"","what":"Implement FLR file","title":"Develop level ratio change elasticity functions","text":"FLR file, proceed beolow. functionalized [PrjCompPPTS::ff_ppts_lrce_flr()]. First, start long file, keep locations location types, select subst years, select teachers, schools, students, youthpop different ratios can constructed, levels want kept Second, vars kept long wide: unit obs: locType x loc x time Third, RATIO/LEVELS: Compute key ratios within time periods, year level/ratio stats done: Teacher student: var_rat_t2s Teacher youthpop: var_rat_t2y School student: var_rat_s2s School youthpop: var_rat_sty Review output. FLR","code":"df_ysts <- ppts_wrk %>%   filter(variable %in% c(     \"youthpop\", \"student\",     \"teacher\", \"school\"   )) %>%   filter(year_bins_type == \"1940t2020i01\") %>%   mutate(year_bins = as.numeric(year_bins)) %>%   filter(year_bins %in% c(1960, 1980, 1990, 2000, 2010, 2020)) # review years print(unique(df_ysts %>% pull(year_bins))) #> [1] 1960 1980 1990 2000 2010 2020 df_ysts_wide <- df_ysts %>%   pivot_wider(     id_cols = c(\"location_code\", \"location_level\", \"year_bins\"),     names_from = variable,     names_prefix = \"var_lvl_\",     names_sep = \"_\",     values_from = c(value_interp1)   ) print(glue::glue(\"dim of youth wide file: {dim(df_ysts_wide)}\")) #> dim of youth wide file: 1617 #> dim of youth wide file: 7 df_flr <- df_ysts_wide %>%   mutate(     var_rat_y2t = var_lvl_youthpop / var_lvl_teacher,     var_rat_s2t = var_lvl_student / var_lvl_teacher,     var_rat_y2s = var_lvl_youthpop / var_lvl_school,     var_rat_s2s = var_lvl_student / var_lvl_school   ) print(colnames(df_flr)) #>  [1] \"location_code\"    \"location_level\"   \"year_bins\"        \"var_lvl_youthpop\" #>  [5] \"var_lvl_student\"  \"var_lvl_teacher\"  \"var_lvl_school\"   \"var_rat_y2t\"      #>  [9] \"var_rat_s2t\"      \"var_rat_y2s\"      \"var_rat_s2s\" print(glue::glue(\"dim of youth wide ratio file: {dim(df_flr)}\")) #> dim of youth wide ratio file: 1617 #> dim of youth wide ratio file: 11 kable(df_flr[1:300,], caption=\"FLR\")"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_dev_child_teacher_ratio.html","id":"implement-fpc-file","dir":"Articles","previous_headings":"","what":"Implement FPC file","title":"Develop level ratio change elasticity functions","text":"Step 2, generate FPC file. functionalized [PrjCompPPTS::ff_ppts_lrce_fpc()]. First, levels/ratios file (keep ranks), variables levels ratios, convert vars long. unit obs: locType x loc x time x var(level/change). Second, generate ranks, grouped locType x time x var(level/change). Ranking across locations. Third, select subperiods interest, time long wide: unit obs: locType x loc x var(level/change). Fourth, compute stats ratios time level change vars. 1980 2020 change, 80 00, 00 20. Review output. FPC","code":"df_ysts_longer <- df_flr %>%   pivot_longer(     cols = matches(\"var\"),     names_to = c(\"vartype\", \"variable\"),     names_pattern = paste0(\"var_(.*)_(.*)\"),     values_to = \"stat\"   ) %>%   drop_na(stat) print(glue::glue(\"dim of youth wide ratio file: {dim(df_ysts_longer)}\")) #> dim of youth wide ratio file: 6610 #> dim of youth wide ratio file: 6 df_ysts_longer_rank <- df_ysts_longer %>%   group_by(location_level, variable, year_bins) %>%   arrange(stat, ..by_group = TRUE) %>%   mutate(rank = row_number()) %>%   arrange(location_level, variable, year_bins, location_code) %>%   select(-stat, -vartype) %>%   mutate(vartype = \"rank\") %>%   rename(stat = rank) print(glue::glue(\"dim of youth wide ratio file: {dim(df_ysts_longer_rank)}\")) #> dim of youth wide ratio file: 6610 #> dim of youth wide ratio file: 6 ar_it_years_chg <- c(1960, 1980, 2000, 2020) df_ysts_longer_wide <- bind_rows(df_ysts_longer, df_ysts_longer_rank) %>%   filter(year_bins %in% ar_it_years_chg) %>%   pivot_wider(     id_cols = c(\"location_code\", \"location_level\", \"vartype\", \"variable\"),     names_from = year_bins,     names_prefix = \"year\",     names_sep = \"_\",     values_from = c(stat)   ) print(glue::glue(\"dim of youth wide ratio file: {dim(df_ysts_longer_wide)}\")) #> dim of youth wide ratio file: 2716 #> dim of youth wide ratio file: 8 df_fpc <- df_ysts_longer_wide %>%   mutate(     chg_80v60 = (year1980 - year1960) / year1960,     chg_00v80 = (year2000 - year1980) / year1980,     chg_20v00 = (year2020 - year2000) / year2000,     chg_20v80 = (year2020 - year1980) / year1980   ) print(glue::glue(\"dim FPC: {dim(df_fpc)}\")) #> dim FPC: 2716 #> dim FPC: 12 kable(df_fpc[1:300,], caption=\"FPC\")"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_dev_child_teacher_ratio.html","id":"implement-fel-file","dir":"Articles","previous_headings":"","what":"Implement FEL file","title":"Develop level ratio change elasticity functions","text":"functionalized [PrjCompPPTS::ff_ppts_lrce_fel()]. Note also generate elasticity information Compute Elasticities School Resources Changes Populations. done automatically , across possible combinations variables, , generate selected subset elasticities, note manual specify numerator denominator elasticity . First, fpc, keep percentage changes stats vars, drop level rank vars. Second, percentage change file, variables changes time, convert change spans long. unit obs: locType x loc x vars(change) x changeSpan. Third, convert vars(change) wide. unit obs: locType x loc x changeSpan. Fourth, following prior notations, compute percentage changes education resources percentage changes population. changes teachers denominator, call population-teacher elasticity. number schools denominator, call population-school elasticity. labor economics, labor supply elasticity refers change labor supply given change wages, also referred wage-labor-supply elasticity. follow form terminology . use following variable names following elasticities: Teacher student : var_elsa_t2s Teacher youthpop: var_elas_t2y School student: var_elas_s2s School youthpop: var_elas_sty Fifth, clean file convert standard format unit obs locType x loc x vars, year spans columns. Review output. FEL","code":"print(df_fpc %>% distinct(vartype)) #> # A tibble: 3 × 1 #>   vartype #>   <chr>   #> 1 lvl     #> 2 rat     #> 3 rank df_fpc_base <- df_fpc %>%   filter(vartype == \"lvl\") %>%   select(-contains(\"year\"), -vartype) print(glue::glue(\"dim df_fpc_base: {dim(df_fpc_base)}\")) #> dim df_fpc_base: 816 #> dim df_fpc_base: 7 df_fel_long <- df_fpc_base %>%   pivot_longer(     cols = matches(\"chg\"),     names_to = c(\"yearcomp\"),     names_pattern = paste0(\"chg_(.*)\"),     values_to = \"change\"   ) %>%   drop_na(change) print(glue::glue(\"dim df_fel_long: {dim(df_fel_long)}\")) #> dim df_fel_long: 2449 #> dim df_fel_long: 5 df_fel_wide <- df_fel_long %>%   pivot_wider(     id_cols = c(\"location_code\", \"location_level\", \"yearcomp\"),     names_from = variable,     names_prefix = \"var_chg_\",     names_sep = \"_\",     values_from = c(change)   ) print(glue::glue(\"dim df_fel_wide: {dim(df_fel_wide)}\")) #> dim df_fel_wide: 1056 #> dim df_fel_wide: 7 df_fel_elas <- df_fel_wide %>%   mutate(     var_elas_y2t = var_chg_teacher / var_chg_youthpop,     var_elas_s2t = var_chg_teacher / var_chg_student,     var_elas_y2s = var_chg_school / var_chg_youthpop,     var_elas_s2s = var_chg_school / var_chg_student   ) print(glue::glue(\"dim df_fel_elas: {dim(df_fel_elas)}\")) #> dim df_fel_elas: 1056 #> dim df_fel_elas: 11 df_fel <- df_fel_elas %>%   select(-contains(\"var_chg\")) %>%   pivot_longer(     cols = matches(\"var_elas\"),     names_to = c(\"variable\"),     names_pattern = paste0(\"var_elas_(.*)\"),     values_to = \"elasticity\"   ) %>%   drop_na(elasticity) %>%   pivot_wider(     id_cols = c(\"location_code\", \"location_level\", \"variable\"),     names_from = yearcomp,     names_prefix = \"elas_\",     names_sep = \"_\",     values_from = c(elasticity)   ) print(glue::glue(\"dim FEL: {dim(df_fel)}\")) #> dim FEL: 511 #> dim FEL: 7 kable(df_fel[1:300,], caption=\"FEL\")"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_elasticities.html","id":"load-data-inputs-and-review","dir":"Articles","previous_headings":"","what":"Load data inputs and review","title":"Compute Elasticities of School Resources to Changes in Populations","text":"load global population data. review unique values variables. get unique “variable” values, drop enroll_ratio","code":"# File use bl_interp <- FALSE ppts_wrk <- ppts_easia_weuro_world_pchg %>%    filter(!str_detect(year_bins_type, \"1940t2020i01\"))  str(ppts_wrk) #> tibble [25,687 × 9] (S3: tbl_df/tbl/data.frame) #>  $ location_code : Factor w/ 286 levels \"ABW\",\"AFE\",\"AFG\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ location_level: Factor w/ 4 levels \"country\",\"multicountry\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ variable      : Factor w/ 5 levels \"gdp\",\"school\",..: 1 1 1 1 1 1 1 1 3 3 ... #>  $ year_bins_type: Factor w/ 5 levels \"1920t2020i05\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ year_bins     : chr [1:25687] \"1981-1985\" \"1986-1990\" \"1991-1995\" \"1996-2000\" ... #>  $ pchg          : num [1:25687] NA NA 0.0532 0.064 -0.0504 ... #>  $ pchg_interp1  : num [1:25687] 1.2489 0.903 0.0532 0.064 -0.0504 ... #>  $ value         : num [1:25687] NA 27884 29367 31246 29670 ... #>  $ value_interp1 : num [1:25687] 14653 27884 29367 31246 29670 ... ar_st_vars <- unique(ppts_wrk %>% pull(variable)) ar_year_bins_type <- unique(ppts_wrk %>% pull(year_bins_type)) print(ar_st_vars) #> [1] gdp      student  teacher  youthpop school   #> Levels: gdp school student teacher youthpop print(ar_year_bins_type) #> [1] 1920t2020i05 1920t2020i10 1920t2020i20 1925t2015i15 #> Levels: 1920t2020i05 1920t2020i10 1920t2020i20 1925t2015i15 1940t2020i01"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_elasticities.html","id":"numerator-and-denominator-percentage-changes-and-elasticity","dir":"Articles","previous_headings":"","what":"Numerator and denominator percentage changes and Elasticity","title":"Compute Elasticities of School Resources to Changes in Populations","text":"generate separate columns “variables”, containing percentage change value variable. columns numerators, original column denominator. , reshape file just created, “numerators” column. compute elasticities ","code":"it_avg_type <- 1 for (it_avg_type in c(1, 2)) {      if (it_avg_type == 1) {     svr_var_val_exclude <- c(\"value_interp1\", \"pchg_interp1\")     svr_var_val <- \"value\"     svr_chg_var <- \"pchg\"     svr_chg_var_num <- \"pchg_numerator\"     svr_elas_var <- \"elasticity\"   } else if (it_avg_type == 2) {     svr_var_val_exclude <- c(\"value\", \"pchg\")     svr_var_val <- \"value_interp1\"     svr_chg_var <- \"pchg_interp1\"     svr_chg_var_num <- \"pchg_interp1_numerator\"     svr_elas_var <- \"elasticity_interp1\"   }        ppts_wrk_jnt <- ppts_wrk %>%      select(-one_of(svr_var_val_exclude))   ar_st_cur_col_var <- ar_st_vars   for (st_cur_col_var in ar_st_cur_col_var) {     #   st_cur_col_var <- \"school\"     st_new_col_var <- paste0(\"pchgnum_\", st_cur_col_var)     # 20. Generate \"variable\"-specific dataframes     ppts_one_var <- ppts_wrk %>%       select(-one_of(svr_var_val_exclude)) %>%       filter(variable == st_cur_col_var) %>%       select(-!!sym(svr_var_val), - variable) %>%       rename(!!sym(st_new_col_var) := !!sym(svr_chg_var))          # 30. Merge \"variable\"-specific dataframe to main     ppts_wrk_jnt <- ppts_wrk_jnt %>%       left_join(ppts_one_var,                 by = (c(                   \"location_code\" = \"location_code\",                   \"location_level\" = \"location_level\",                   \"year_bins_type\" = \"year_bins_type\",                   \"year_bins\" = \"year_bins\"                 )))   }      # Show variable names   print(colnames(ppts_wrk_jnt))   print(dim(ppts_wrk_jnt))      # 60. Reshape from wide to long, rename variable numerator, variable denominator   ppts_wrk_jnt_long <- ppts_wrk_jnt %>%      pivot_longer(cols = starts_with('pchgnum'),                  names_to = c('variable_numerator'),                  names_pattern = paste0(\"pchgnum_(.*)\"),                  values_to = svr_chg_var_num)      # 70. Compute elasticity   # Now, we simply divide the numerator from the variable \"pchg_yrspan_interp1_numerator\" by the values in \"pchg_yrspan_interp1\", which is the denominator.    # Compute elasticities   ppts_wrk_jnt_long <- ppts_wrk_jnt_long %>%     mutate(!!sym(svr_elas_var) :=                 !!sym(svr_chg_var_num)/!!sym(svr_chg_var))   # Keep the elasticity column    # ppts_wrk_jnt_long <- ppts_wrk_jnt_long %>%    #   select(-contains(\"value\"))      # 61. save files    if (it_avg_type == 1) {     ppts_wrk_jnt_long_val <- ppts_wrk_jnt_long   } else if (it_avg_type == 2) {     ppts_wrk_jnt_long_interp1 <- ppts_wrk_jnt_long   }   } #>  [1] \"location_code\"    \"location_level\"   \"variable\"         \"year_bins_type\"   #>  [5] \"year_bins\"        \"pchg\"             \"value\"            \"pchgnum_gdp\"      #>  [9] \"pchgnum_student\"  \"pchgnum_teacher\"  \"pchgnum_youthpop\" \"pchgnum_school\"   #> [1] 25687    12 #>  [1] \"location_code\"    \"location_level\"   \"variable\"         \"year_bins_type\"   #>  [5] \"year_bins\"        \"pchg_interp1\"     \"value_interp1\"    \"pchgnum_gdp\"      #>  [9] \"pchgnum_student\"  \"pchgnum_teacher\"  \"pchgnum_youthpop\" \"pchgnum_school\"   #> [1] 25687    12"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_elasticities.html","id":"examine-elasticities","dir":"Articles","previous_headings":"","what":"Examine elasticities","title":"Compute Elasticities of School Resources to Changes in Populations","text":"now examine elasticity results. show percentage changes schools teachers, divided percentage change students, elasticity measures.","code":""},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_elasticities.html","id":"elasticities-in-afghanistan","dir":"Articles","previous_headings":"Examine elasticities","what":"Elasticities in Afghanistan","title":"Compute Elasticities of School Resources to Changes in Populations","text":"data schools. show elasticity teachers respect students, per decade. Afghanistan:Elastiicty percentage change students denominator percentage change teacher numerator, using bin-type=1920t2020i10","code":"# Display st_year_bin_type <- \"1920t2020i10\" st_cur_col_var <- c(\"teacher\") # print(ppts_wrk_jnt_long[1:50,]) st_caption <- paste0(   \"Afghanistan:\",   \"Elastiicty with percentage change in students in the denominator \",    \"and percentage change in \", st_cur_col_var, \" in the numerator, \",    \"using as bin-type=\", st_year_bin_type) kable(ppts_wrk_jnt_long_interp1 %>%          filter(location_code == 'AFG' &                   variable == 'student' &                   year_bins_type == st_year_bin_type &                  variable_numerator == st_cur_col_var) %>%         select(-location_level, -year_bins_type,                 -value_interp1),       caption = st_caption)"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_elasticities.html","id":"elasticities-in-germany","dir":"Articles","previous_headings":"Examine elasticities","what":"Elasticities in Germany","title":"Compute Elasticities of School Resources to Changes in Populations","text":"Germany:Elastiicty percentage change students denominator percentage change school numerator, using bin-type=1920t2020i10","code":"# Display st_year_bin_type <- \"1920t2020i10\" st_cur_col_var <- \"school\" # print(ppts_wrk_jnt_long[1:50,]) st_caption <- paste0(   \"Germany:\",   \"Elastiicty with percentage change in students in the denominator \",    \"and percentage change in \", st_cur_col_var, \" in the numerator, \",    \"using as bin-type=\", st_year_bin_type) kable(ppts_wrk_jnt_long_interp1 %>%          filter(location_code == 'DEU' &                   variable == 'student' &                   year_bins_type == st_year_bin_type &                  variable_numerator == st_cur_col_var) %>%         select(-location_level, -year_bins_type,                 -value_interp1),       caption = st_caption)"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_elasticities.html","id":"elasticities-in-austria","dir":"Articles","previous_headings":"Examine elasticities","what":"Elasticities in Austria","title":"Compute Elasticities of School Resources to Changes in Populations","text":"Austria, elasticity teachers students, schools students, every 20 years Austria:Elastiicty percentage change students denominator percentage change school numerator, using bin-type=1920t2020i20","code":"# Display st_year_bin_type <- \"1920t2020i20\" st_cur_col_var <- \"school\" # print(ppts_wrk_jnt_long[1:50,]) st_caption <- paste0(   \"Austria:\",   \"Elastiicty with percentage change in students in the denominator \",    \"and percentage change in \", st_cur_col_var, \" in the numerator, \",    \"using as bin-type=\", st_year_bin_type) kable(ppts_wrk_jnt_long_interp1 %>%          filter(location_code == 'AUT' &                   variable == 'student' &                   year_bins_type == st_year_bin_type &                  variable_numerator == st_cur_col_var) %>%         select(-location_level, -year_bins_type,                 -value_interp1),       caption = st_caption)"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_elasticities.html","id":"elasticities-in-busan-korea","dir":"Articles","previous_headings":"Examine elasticities","what":"Elasticities in Busan, Korea","title":"Compute Elasticities of School Resources to Changes in Populations","text":"Busan, Korea, elasticity teachers students, schools students, every 10 years Busan Korea Elastiicty teachers respect students","code":"# Display st_year_bin_type <- \"1920t2020i10\" st_cur_col_var <- \"teacher\" # print(ppts_wrk_jnt_long[1:50,]) kable(ppts_wrk_jnt_long_interp1 %>%          filter(location_code == 'KOR_Busan' &                   variable == 'student' &                   year_bins_type == st_year_bin_type &                  variable_numerator == st_cur_col_var) %>%         select(-location_level, -year_bins_type,                 -value_interp1),       caption = \"Busan Korea Elastiicty of teachers with respect to students\")"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_elasticities.html","id":"save-elasticity-file","dir":"Articles","previous_headings":"","what":"Save elasticity file","title":"Compute Elasticities of School Resources to Changes in Populations","text":"","code":"# Review file variable names print(colnames(ppts_wrk_jnt_long)) #>  [1] \"location_code\"          \"location_level\"         \"variable\"               #>  [4] \"year_bins_type\"         \"year_bins\"              \"pchg_interp1\"           #>  [7] \"value_interp1\"          \"variable_numerator\"     \"pchg_interp1_numerator\" #> [10] \"elasticity_interp1\" print(str(ppts_wrk_jnt_long)) #> tibble [128,435 × 10] (S3: tbl_df/tbl/data.frame) #>  $ location_code         : Factor w/ 286 levels \"ABW\",\"AFE\",\"AFG\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ location_level        : Factor w/ 4 levels \"country\",\"multicountry\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ variable              : Factor w/ 5 levels \"gdp\",\"school\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ year_bins_type        : Factor w/ 5 levels \"1920t2020i05\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ year_bins             : chr [1:128435] \"1981-1985\" \"1981-1985\" \"1981-1985\" \"1981-1985\" ... #>  $ pchg_interp1          : num [1:128435] 1.25 1.25 1.25 1.25 1.25 ... #>  $ value_interp1         : num [1:128435] 14653 14653 14653 14653 14653 ... #>  $ variable_numerator    : chr [1:128435] \"gdp\" \"student\" \"teacher\" \"youthpop\" ... #>  $ pchg_interp1_numerator: num [1:128435] 1.2489 NA NA -0.0298 NA ... #>  $ elasticity_interp1    : num [1:128435] 1 NA NA -0.0239 NA ... #> NULL # Save file if (bl_resave_to_data) {   ppts_easia_weuro_world_elas_interp1 <- ppts_wrk_jnt_long_interp1   write_csv(ppts_easia_weuro_world_elas_interp1, \"../data/ppts_easia_weuro_world_elas_interp1.csv\")   usethis::use_data(ppts_easia_weuro_world_elas_interp1, overwrite = TRUE)      ppts_easia_weuro_world_elas_raw <- ppts_wrk_jnt_long_val   write_csv(ppts_easia_weuro_world_elas_raw, \"../data/ppts_easia_weuro_world_elas_raw.csv\")   usethis::use_data(ppts_easia_weuro_world_elas_raw, overwrite = TRUE) }"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"load-and-select","dir":"Articles","previous_headings":"","what":"Load and select","title":"Compute Percentage Changes of School Resources and Population","text":"","code":"# A. Load and select ---- ppts_easia_weuro_sel <- ppts_easia_weuro_world %>%   select(location_code, location_level, year,          contains(\"stats\"), -stats_enroll_ratio)"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"transform-data","dir":"Articles","previous_headings":"","what":"Transform data","title":"Compute Percentage Changes of School Resources and Population","text":"","code":"# B. Long to wide ---- ppts_easia_weuro_long <- ppts_easia_weuro_sel %>%   pivot_longer(cols = starts_with('stats'),                names_to = c('variable'),                names_pattern = paste0(\"stats_(.*)\"),                values_to = \"value\") str(ppts_easia_weuro_long) #> tibble [88,185 × 5] (S3: tbl_df/tbl/data.frame) #>  $ location_code : Factor w/ 286 levels \"ABW\",\"AFE\",\"AFG\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ location_level: Factor w/ 4 levels \"country\",\"multicountry\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ year          : num [1:88185] 1960 1960 1960 1960 1960 ... #>  $ variable      : chr [1:88185] \"youthpop\" \"student\" \"teacher\" \"school\" ... #>  $ value         : num [1:88185] 23769 NA NA NA NA ... # View(ppts_easia_weuro_long)  # C sort and group ---- ppts_easia_weuro_long <- ppts_easia_weuro_long %>%   arrange(location_code, location_level, variable, year) %>%   group_by(location_code, location_level, variable) # kable(ppts_easia_weuro_long %>%  #   filter(location_code == 'AFG' & variable == 'student'))"},{"path":[]},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"raw-percentage-changes","dir":"Articles","previous_headings":"Annual percentage changes, Interpolate and Extrapolate","what":"Raw percentage changes","title":"Compute Percentage Changes of School Resources and Population","text":"compute annual percentage changes . Note ","code":"# D. Annual percentage changes ---- # Compute these # - annual: for all possible consecutive years # - annual_interp1: annual based on consecutive year if possible,  # when that is not possible, find closest years of available data,  # and derive annual (considering compounding) growth rates  # D.1 annual ppts_easia_weuro_long <- ppts_easia_weuro_long %>%   mutate(pchg_yr1 = (value - lag(value)) / lag(value))  # View(ppts_easia_weuro_long) kable(ppts_easia_weuro_long %>%          filter(location_code == 'AFG' & variable == 'student')) kable(ppts_easia_weuro_long %>%         filter(location_code == 'KOR_Busan' & variable == 'school'))"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"interpolating","dir":"Articles","previous_headings":"Annual percentage changes, Interpolate and Extrapolate","what":"Interpolating","title":"Compute Percentage Changes of School Resources and Population","text":"drop NA values, keeping rows observed levels. take difference levels consecutive rows divide prior level get percentage changes. potential percentage changes across multiple years gaps NA values. assume constant growth rate -years, compute percentage annualized percentage changes. Given , annual percentage change formula shown : \\[ \\text{annualPercentChange}_{\\left(\\text{} t' \\text{ } t'+1\\right)} = \\left(\\left( \\frac{\\text{schoolTeacherOrStudent}_{t+\\tau}}{\\text{schoolTeacherOrStudent}_{t}} \\right)^{\\frac{1}{\\tau}} - 1\\right), \\] , percentage change \\(t \\le t' \\le t+\\tau-1\\). annual percentage change exact know level schools, teachers, students current year year immediately . based growth trend “linear” interpolation years missing data . use interpolated annual percentage changes fill gaps levels.","code":"# D.2 annual_interp1 # D.2.1 compute linearly interpolated annual change # create new sorting var, to take difference across years even if not # consecutive ppts_easia_weuro_interp1 <- ppts_easia_weuro_long %>%   drop_na(value) %>%   # New sorting variable, +1 regardless of year gap   mutate(year_with_gap_ctr = row_number()) %>%   arrange(location_code, location_level, variable, year_with_gap_ctr) %>%   group_by(location_code, location_level, variable) %>%   # compute percentage change over span and years gap over span   mutate(pchg_span_interp1 = (value - lag(value)) / lag(value),          span_yr = (year - lag(year))) %>%   # linear-interpolated annualized (with compounding) percentage change   mutate(pchg_yr1_interp1 = abs(1 + pchg_span_interp1) ^ (1 / span_yr) - 1) %>%   # adjust values given percentages interpolated   select(location_code, location_level,          year, variable, span_yr, value, pchg_yr1_interp1)  # D.2.2 expand to all interpolating years # the pchg_yr1_interp1 variable is only shown at start year,  # due to drop_na(value) earlier # need to expand to all years ppts_easia_weuro_interp1 <- ppts_easia_weuro_interp1 %>%   ungroup() %>% mutate(span_yr_dup = span_yr) %>%   drop_na(span_yr) %>%   tidyr::uncount(span_yr) %>%   group_by(location_code, location_level, variable, year) %>%   mutate(year_adj = row_number() + year - span_yr_dup,           gap_ctr = row_number()) %>%   ungroup() %>%   select(location_code, location_level,          year_adj, variable, value, pchg_yr1_interp1, gap_ctr, span_yr_dup) %>%   rename(year = year_adj)  # D.2.3, Fill in missing values ppts_easia_weuro_interp1 <- ppts_easia_weuro_interp1 %>%   arrange(location_code, location_level, variable, year) %>%   group_by(location_code, location_level, variable) %>%   mutate(value_interp1 = case_when(     # Conditions A and B are both gap_ctr == span_yr_dup     # A. value is correct, originally not NA     gap_ctr == 1 & span_yr_dup == 1 ~ value,     # B. value is also correct, next available year with non NA     gap_ctr == span_yr_dup & span_yr_dup > 1 ~ value,     # C. in-between years, where values were NA     gap_ctr < span_yr_dup ~ (value/((1+pchg_yr1_interp1)^(span_yr_dup-gap_ctr)))     )) %>%   ungroup() %>%   select(-gap_ctr, -span_yr_dup, -value)  # Print str(ppts_easia_weuro_interp1) #> tibble [51,817 × 6] (S3: tbl_df/tbl/data.frame) #>  $ location_code   : Factor w/ 286 levels \"ABW\",\"AFE\",\"AFG\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ location_level  : Factor w/ 4 levels \"country\",\"multicountry\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ year            : num [1:51817] 1987 1988 1989 1990 1991 ... #>  $ variable        : chr [1:51817] \"gdp\" \"gdp\" \"gdp\" \"gdp\" ... #>  $ pchg_yr1_interp1: num [1:51817] 0.176 0.2014 0.122 0.0209 0.0384 ... #>  $ value_interp1   : num [1:51817] 20263 24343 27313 27884 28954 ... kable(ppts_easia_weuro_interp1 %>% select(-location_level) %>%         filter(location_code == 'AFG' & variable == 'student'))"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"merge-raw-and-interpolated-results-together","dir":"Articles","previous_headings":"Annual percentage changes, Interpolate and Extrapolate","what":"Merge raw and interpolated results together","title":"Compute Percentage Changes of School Resources and Population","text":"","code":"# Only consider years in this range it_min_year <- 1920 it_max_year <- 2020 # D.3 merge together ppts_easia_weuro_long <- ppts_easia_weuro_long %>%   left_join(ppts_easia_weuro_interp1,             by = (c('location_code' = 'location_code',                     'location_level' = 'location_level',                     'year' = 'year',                     'variable' = 'variable'))) %>%     filter(year <= it_max_year & year >= it_min_year) %>%   # add in data from the first year of raw data availability   mutate(value_interp1 = case_when(     !is.na(value) & is.na(value_interp1) ~ value,     TRUE ~ value_interp1     ))"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"extrapolating","dir":"Articles","previous_headings":"Annual percentage changes, Interpolate and Extrapolate","what":"Extrapolating","title":"Compute Percentage Changes of School Resources and Population","text":"extrapolate several years start end data timeframes. Extrapolation exceed going 5 years forward going 5 years backwards. extrapolation happen within years least one variable, among variables country, non-NA values. cases country’s data available starting 1980, allow extrapolation back 1980 5 years. Specifically, generally population data 1960 2020 countries, extrapolating prior 1960 2020. data Korea starts 1965, extrapolate years 1965, one Korean variables data starting 1970, extrapolate 1965 1970. variable data starting 1980, extrapolate five years, back 1975. Germany, unification happened 1992. data 1990, preventing us computing change 1990 2000. extrapolate 1992 back 5 years 1987, generating value 1990. Extrapolation meant help situations data 2019, consistency comparison, useful extend data 2020 extrapolating 1 year forward. Compute start end year variable country. interpolated value column, NaN values start end available data. First go forward, value = lag(value) x lag(1+change), fill value NaN current year less 5 terimal data availability time. going backwards, , value = lead(value, n=1) / lead(1 + change, n=2) First, generate end start years interpolating percentages, etc. Second extrapolate.","code":"# Generate start and end times ppts_easia_weuro_extrapolate <- ppts_easia_weuro_long %>%   drop_na(value) %>%   arrange(location_code, location_level, variable, year) %>%   group_by(location_code, location_level, variable) %>%   mutate(year_start = first(year, na_rm=TRUE), year_end = last(year, na_rm=TRUE),          value_start = first(value, na_rm=TRUE), value_end = last(value, na_rm=TRUE),          pchg_yr1_interp1_start = first(pchg_yr1_interp1, na_rm=TRUE),          pchg_yr1_interp1_end = last(pchg_yr1_interp1, na_rm=TRUE)) %>%    slice(1) %>%   select(location_code, location_level, variable,           contains(\"_start\"), contains(\"_end\")) # How many years to extrapolate back it_year_extrplt_backmost <- 5 it_year_extrplt_fordmost <- 5  # Merge with full skeleton for expansion ppts_easia_weuro_extrapolate <- ppts_easia_weuro_long %>%   select(location_code, location_level, variable, year, value) %>%   left_join(ppts_easia_weuro_extrapolate,             by = (c('location_code' = 'location_code',                     'location_level' = 'location_level',                     'variable' = 'variable')))   # Extrapolate forward ppts_easia_weuro_extrapolate <- ppts_easia_weuro_extrapolate %>%   mutate(value_extrapolate =     case_when(         is.na(value) & (year_end + it_year_extrplt_fordmost >= year) & (year > year_end) ~           (value_end*((1+pchg_yr1_interp1_end)^(year-year_end))),         is.na(value) & (year_start - it_year_extrplt_backmost <= year) & (year < year_start) ~           (value_start/((1+pchg_yr1_interp1_start)^(year_start - year))),         TRUE ~ NA       )) %>%   mutate(pchg_yr1_interp1_extrapolate =     case_when(         (year_end + it_year_extrplt_fordmost >= year) & (year >= year_end) ~           pchg_yr1_interp1_end,         (year_start - it_year_extrplt_backmost <= year) & (year <= year_start) ~           pchg_yr1_interp1_start,         TRUE ~ NA       ))      # Get extrapolated values ppts_easia_weuro_extrapolate <- ppts_easia_weuro_extrapolate %>%   drop_na(pchg_yr1_interp1_extrapolate) %>%    select(location_code, location_level, variable, year,           value_extrapolate, pchg_yr1_interp1_extrapolate) %>%   rename(value_interp1 = value_extrapolate,           pchg_yr1_interp1 = pchg_yr1_interp1_extrapolate)  # Print kable(ppts_easia_weuro_extrapolate %>% select(-location_level) %>%         filter(location_code == 'AFG' & variable == 'student')) #> Adding missing grouping variables: `location_level` # kable(ppts_easia_weuro_extrapolate %>% select(-location_level) %>% #         filter(location_code == 'KOR_Busan' & variable == 'school'))"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"merge-raw-and-interpolated-results-together-with-extrapolated-results","dir":"Articles","previous_headings":"Annual percentage changes, Interpolate and Extrapolate","what":"Merge raw and interpolated results together with extrapolated results","title":"Compute Percentage Changes of School Resources and Population","text":"Merge extrpolated results back main dataframe.","code":"# Merge ppts_easia_weuro_long <- ppts_easia_weuro_long %>%   left_join(ppts_easia_weuro_extrapolate,             by = (c('location_code' = 'location_code',                     'location_level' = 'location_level',                     'year' = 'year',                     'variable' = 'variable')))   # Combine columns ppts_easia_weuro_long <- ppts_easia_weuro_long %>%               mutate(value_interp1 = coalesce(value_interp1.x, value_interp1.y)) %>%   select(-value_interp1.x, -value_interp1.y) %>%   mutate(pchg_yr1_interp1 = coalesce(pchg_yr1_interp1.x, pchg_yr1_interp1.y)) %>%   select(-pchg_yr1_interp1.x, -pchg_yr1_interp1.y) %>%   drop_na(value_interp1)"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"interpolation-and-extrapolation-results-overview","dir":"Articles","previous_headings":"","what":"Interpolation and Extrapolation Results Overview","title":"Compute Percentage Changes of School Resources and Population","text":"results value_interp1 column contains interpolation extrapolation results.","code":""},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"afghanistan-interpolate-and-extrapolate-results","dir":"Articles","previous_headings":"Interpolation and Extrapolation Results Overview","what":"Afghanistan Interpolate and Extrapolate Results","title":"Compute Percentage Changes of School Resources and Population","text":"illustrate interpolation results showing outputs Afghanistan student counts. , extrapolating several years back 1965, forward 1 year 2020. fill several years missing data. extrapolating data 2020, able generate percentage change 2000 2020, 2010 2020, etc. also able see levels 2020. percentages levels available without interpolation/extrapolation. can see data Afghanistan much complete interpolating/extrapolating. Raw interpolated Afghanistan students results","code":"# str(ppts_easia_weuro_long) # print kable(ppts_easia_weuro_long %>%          filter(location_code == 'AFG' & variable == 'student') %>%         ungroup() %>%         select(location_code, year, variable,            value, value_interp1, pchg_yr1, pchg_yr1_interp1),        caption=\"Raw and interpolated Afghanistan students results\")"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"austria-interpolate-and-extrapolate-results","dir":"Articles","previous_headings":"Interpolation and Extrapolation Results Overview","what":"Austria Interpolate and Extrapolate Results","title":"Compute Percentage Changes of School Resources and Population","text":"Austrian data starts 1923, school count available year. Hence, extrapolate prior . data starts 1923 (meaning measures information available 1923), school count data starts 1925, extrapolate back 2 years 1923. Austrian data initial decades spotty, hence interpolate fill gaps. Raw interpolated Austria schools results","code":"# str(ppts_easia_weuro_long) # print kable(ppts_easia_weuro_long %>%          filter(location_code == 'AUT' & variable == 'school') %>%         ungroup() %>%         select(location_code, year, variable,            value, value_interp1, pchg_yr1, pchg_yr1_interp1),        caption=\"Raw and interpolated Austria schools results\")"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"germany-example","dir":"Articles","previous_headings":"Interpolation and Extrapolation Results Overview","what":"Germany Example","title":"Compute Percentage Changes of School Resources and Population","text":"Germany reunified 1992, extrapolate obtain data predictions 1990 facilitate computing percentage changes. Raw interpolated Germany schools results","code":"# str(ppts_easia_weuro_long) # print kable(ppts_easia_weuro_long %>%          filter(location_code == 'DEU' & variable == 'school') %>%         ungroup() %>%         select(location_code, year, variable,            value, value_interp1, pchg_yr1, pchg_yr1_interp1),        caption=\"Raw and interpolated Germany schools results\")"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"korean-busan-interpolate-and-extrapolate-results","dir":"Articles","previous_headings":"Interpolation and Extrapolation Results Overview","what":"Korean Busan Interpolate and Extrapolate Results","title":"Compute Percentage Changes of School Resources and Population","text":"extrapolation interpolation Busan Korea, data available school counts 1965 2020, min max years Korean data, data available every single year. Raw interpolated Korean Busan province schools results","code":"# str(ppts_easia_weuro_long) # print kable(ppts_easia_weuro_long %>%          filter(location_code == 'KOR_Busan' & variable == 'school') %>%         ungroup() %>%         select(location_code, year, variable,            value, value_interp1, pchg_yr1, pchg_yr1_interp1),        caption=\"Raw and interpolated Korean Busan province schools results\")"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"generate-percentage-changes-every-5-10-15-20-years","dir":"Articles","previous_headings":"","what":"Generate percentage changes every 5, 10, 15, 20 years","title":"Compute Percentage Changes of School Resources and Population","text":"now consider several different cuts, end-points compute percentage changes. put cuts associated string names two lists. Generate percentage changes across start end end points bin, bins varying length. raw interpolated data.","code":"# Every five years from 1940 until 2020 ar_it_cuts_1940t2020_i05 <- seq(1920, 2020, length.out = 21) st_cuts_1940t2020_i05 <- \"1920t2020i05\" # Every ten years from 1940 until 2020 ar_it_cuts_1940t2020_i10 <- seq(1920, 2020, length.out = 11) st_cuts_1940t2020_i10 <- \"1920t2020i10\" # Every 15 years from 1940 until 2020 ar_it_cuts_1940t2020_i15 <- seq(1925, 2015, length.out = 7) st_cuts_1940t2020_i15 <- \"1925t2015i15\" # Every 20 years from 1940 until 2020 ar_it_cuts_1940t2020_i20 <- seq(1920, 2020, length.out = 6) st_cuts_1940t2020_i20 <- \"1920t2020i20\" # List of cuts ls_ar_it_cuts <- list(   ar_it_cuts_1940t2020_i05,   ar_it_cuts_1940t2020_i10,   ar_it_cuts_1940t2020_i15,   ar_it_cuts_1940t2020_i20 ) # Add names names(ls_ar_it_cuts) <- c(   st_cuts_1940t2020_i05,   st_cuts_1940t2020_i10,   st_cuts_1940t2020_i15,   st_cuts_1940t2020_i20 ) # Display for (st_cuts_name in names(ls_ar_it_cuts)) {   print(glue::glue(     \"cutTypeName={st_cuts_name}:\\n\",     \"bins={ls_ar_it_cuts[st_cuts_name]}\")) } #> cutTypeName=1920t2020i05: #> bins=c(1920, 1925, 1930, 1935, 1940, 1945, 1950, 1955, 1960, 1965, 1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020) #> cutTypeName=1920t2020i10: #> bins=c(1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020) #> cutTypeName=1925t2015i15: #> bins=c(1925, 1940, 1955, 1970, 1985, 2000, 2015) #> cutTypeName=1920t2020i20: #> bins=c(1920, 1940, 1960, 1980, 2000, 2020) # E. Generate cuts ----- it_avg_type <- 1 it_cut_type <- 1 for (it_avg_type in c(1, 2)) {      if (it_avg_type == 1) {     svr_chg_var <- \"pchg_yr1\"     # common var across all spans     svr_chg_var_new <- \"pchg\"     svr_var_val <- \"value\"   } else if (it_avg_type == 2) {     svr_chg_var <- \"pchg_yr1_interp1\"     # common var across all spans     svr_chg_var_new <- \"pchg_interp1\"     svr_var_val <- \"value_interp1\"   }      # Add to stack the annual results   ppts_easia_weuro_pchg <- ppts_easia_weuro_long %>%     select(location_code, location_level,            variable, year, one_of(svr_chg_var, svr_var_val)) %>%     filter(!is.na(!!sym(svr_chg_var)) | !is.na(!!sym(svr_var_val))) %>%     rename(!!sym(svr_chg_var_new) := !!sym(svr_chg_var),            year_bins = year) %>%     mutate(year_bins = as.factor(year_bins)) %>%     mutate(year_bins_type = \"1940t2020i01\") %>%     ungroup()      # Loop over cut types       for (st_cuts_name in names(ls_ar_it_cuts)) {     print(glue::glue(       \"cutTypeName={st_cuts_name}:\\n\",       \"bins={ls_ar_it_cuts[st_cuts_name]}\"))          # temp dataframe     ppts_easia_weuro_long_cut <- ppts_easia_weuro_long %>%       select(location_code, location_level,              variable, year,              one_of(svr_chg_var, svr_var_val))          # E.1 Cut types     ar_it_cuts <- ls_ar_it_cuts[[st_cuts_name]]     it_gap <- ar_it_cuts[2] - ar_it_cuts[1]     ar_it_end_seg <- ar_it_cuts[2:length(ar_it_cuts)]     ar_it_start_seg <- ar_it_end_seg - it_gap + 1     ar_st_lab <- paste0(ar_it_start_seg, \"-\", ar_it_end_seg)          # E.2 Generate new year groupings, consider only full-segments     # consider only sub-segments with observations in all years     ppts_easia_weuro_long_cut <- ppts_easia_weuro_long_cut %>%       mutate(year_bins = cut(year,                              breaks = ar_it_cuts,                              labels = ar_st_lab,                              right = TRUE)) %>%       group_by(location_code, location_level,                variable, year_bins) %>%       mutate(val_n_in_bin = sum(!is.na(!!sym(svr_chg_var))))     # filter(val_n_in_bin == it_gap)          # E.3 cumulative product     ppts_easia_weuro_long_cut <- ppts_easia_weuro_long_cut %>%       arrange(location_code, location_level, variable, year_bins, year) %>%       group_by(location_code, location_level, variable, year_bins) %>%       mutate(!!sym(svr_chg_var_new) := cumprod(1 + !!sym(svr_chg_var)) - 1) %>%        mutate(!!sym(svr_chg_var_new) :=          case_when(val_n_in_bin == it_gap ~ !!sym(svr_chg_var_new),                   TRUE ~ NA))      # View(ppts_easia_weuro_long_cut)          # E.4, slices last row     ppts_easia_weuro_long_cut <- ppts_easia_weuro_long_cut %>%       slice(n()) %>%       select(location_code, location_level,              variable, year_bins, one_of(svr_chg_var_new, svr_var_val)) %>%       ungroup() %>%       mutate(year_bins_type = st_cuts_name) %>%       filter(!is.na(!!sym(svr_chg_var_new)) | !is.na(!!sym(svr_var_val))) %>%        drop_na(year_bins)          # E.5 Stack     ppts_easia_weuro_pchg <- bind_rows(       ppts_easia_weuro_pchg, ppts_easia_weuro_long_cut)   }      # export   if (it_avg_type == 1) {     ppts_easia_weuro_pchg_raw <- ppts_easia_weuro_pchg   } else if (it_avg_type == 2) {     ppts_easia_weuro_pchg_interp1 <- ppts_easia_weuro_pchg   }      # # Print results   # print(kable(ppts_easia_weuro_long %>%    #         filter(location_code == 'AFG' & variable == 'student'),    #        caption= paste0(\"breaks=\", st_cuts_name, \", variable=\", svr_chg_var_new))) } #> cutTypeName=1920t2020i05: #> bins=c(1920, 1925, 1930, 1935, 1940, 1945, 1950, 1955, 1960, 1965, 1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020) #> cutTypeName=1920t2020i10: #> bins=c(1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020) #> cutTypeName=1925t2015i15: #> bins=c(1925, 1940, 1955, 1970, 1985, 2000, 2015) #> cutTypeName=1920t2020i20: #> bins=c(1920, 1940, 1960, 1980, 2000, 2020) #> cutTypeName=1920t2020i05: #> bins=c(1920, 1925, 1930, 1935, 1940, 1945, 1950, 1955, 1960, 1965, 1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020) #> cutTypeName=1920t2020i10: #> bins=c(1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010, 2020) #> cutTypeName=1925t2015i15: #> bins=c(1925, 1940, 1955, 1970, 1985, 2000, 2015) #> cutTypeName=1920t2020i20: #> bins=c(1920, 1940, 1960, 1980, 2000, 2020)"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"merge-raw-and-interpolated-results-together-again","dir":"Articles","previous_headings":"Generate percentage changes every 5, 10, 15, 20 years","what":"Merge raw and interpolated results together, again","title":"Compute Percentage Changes of School Resources and Population","text":"generating percentage changes different spans, merge .","code":"# D.3 merge together # full_join same as left_join,  ppts_easia_weuro_world_pchg <- ppts_easia_weuro_pchg_interp1 %>%   full_join(ppts_easia_weuro_pchg_raw,             by = (c('location_code' = 'location_code',                     'location_level' = 'location_level',                     'variable' = 'variable',                      'year_bins_type' = 'year_bins_type',                     'year_bins' = 'year_bins'             ))) %>%    mutate(variable = as.factor(variable),           year_bins_type = as.factor(year_bins_type),           # year_bins as string to allow for correct sorting          year_bins = as.character(year_bins)) %>%   select(location_code, location_level,           variable,           year_bins_type, year_bins,           pchg, pchg_interp1,           value, value_interp1)  # %>%    # value has missing data at the start year of each perentage calculation   # value_interp1 is just raw data but complete   # select(-value) %>% rename(value = value_interp1)  str(ppts_easia_weuro_world_pchg) #> tibble [82,428 × 9] (S3: tbl_df/tbl/data.frame) #>  $ location_code : Factor w/ 286 levels \"ABW\",\"AFE\",\"AFG\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ location_level: Factor w/ 4 levels \"country\",\"multicountry\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ variable      : Factor w/ 5 levels \"gdp\",\"school\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ year_bins_type: Factor w/ 5 levels \"1920t2020i05\",..: 5 5 5 5 5 5 5 5 5 5 ... #>  $ year_bins     : chr [1:82428] \"1981\" \"1982\" \"1983\" \"1984\" ... #>  $ pchg          : num [1:82428] NA NA NA NA NA ... #>  $ pchg_interp1  : num [1:82428] 0.176 0.176 0.176 0.176 0.176 ... #>  $ value         : num [1:82428] NA NA NA NA NA ... #>  $ value_interp1 : num [1:82428] 7662 9010 10596 12460 14653 ... # print(ppts_easia_weuro_world_pchg[1:50,])"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"sort-and-display","dir":"Articles","previous_headings":"","what":"Sort and Display","title":"Compute Percentage Changes of School Resources and Population","text":"sort variables clearly organized output file.","code":"# Arrange results  ppts_easia_weuro_world_pchg <- ppts_easia_weuro_world_pchg %>%   arrange(year_bins_type,            location_level, location_code,            variable, year_bins)"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"afghanistan-as-example","dir":"Articles","previous_headings":"Sort and Display","what":"Afghanistan as Example","title":"Compute Percentage Changes of School Resources and Population","text":"print results year year group aggregation. Afghanistan example demonstrates able compute interval-percentage changes interpolation, given filled values key years. use student count example. Note “value” column shows value last year interval, observed. Afghanistan example, aggregate=1920t2020i05 Afghanistan example, aggregate=1920t2020i10 Afghanistan example, aggregate=1925t2015i15 Afghanistan example, aggregate=1920t2020i20","code":"# print for (st_cuts_name in names(ls_ar_it_cuts)) {   print(     kable(ppts_easia_weuro_world_pchg %>%              filter(location_code == 'AFG' &                       variable == 'student' &                      year_bins_type == st_cuts_name) %>%              select(-location_level, -year_bins_type),           caption = paste0(\"Afghanistan example, aggregate=\", st_cuts_name))) }"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"austria-as-example","dir":"Articles","previous_headings":"Sort and Display","what":"Austria as Example","title":"Compute Percentage Changes of School Resources and Population","text":"illustrate Austria example, showing data school count. able fill initial decades/years little bit interpolation. Austria example, aggregate=1920t2020i05 Austria example, aggregate=1920t2020i10 Austria example, aggregate=1925t2015i15 Austria example, aggregate=1920t2020i20","code":"# print for (st_cuts_name in names(ls_ar_it_cuts)) {   print(     kable(ppts_easia_weuro_world_pchg %>%              filter(location_code == 'AUT' &                       variable == 'school' &                      year_bins_type == st_cuts_name) %>%             select(-location_level, -year_bins_type),            caption = paste0(\"Austria example, aggregate=\", st_cuts_name))) }"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"germany-as-example","dir":"Articles","previous_headings":"Sort and Display","what":"Germany as Example","title":"Compute Percentage Changes of School Resources and Population","text":"illustrate Germany example, filled values. Germany example, aggregate=1920t2020i05 Germany example, aggregate=1920t2020i10 Germany example, aggregate=1925t2015i15 Germany example, aggregate=1920t2020i20","code":"# print for (st_cuts_name in names(ls_ar_it_cuts)) {   print(     kable(ppts_easia_weuro_world_pchg %>%              filter(location_code == 'DEU' &                       variable == 'school' &                      year_bins_type == st_cuts_name) %>%             select(-location_level, -year_bins_type),            caption = paste0(\"Germany example, aggregate=\", st_cuts_name))) }"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/articles/ffv_gen_percent_changes.html","id":"store-to-file","dir":"Articles","previous_headings":"","what":"Store to file","title":"Compute Percentage Changes of School Resources and Population","text":"Finally, save results file data folder.","code":"# Write to CSV and write to rda if (bl_resave_to_data) {   write_csv(ppts_easia_weuro_world_pchg, \"../data/ppts_easia_weuro_world_pchg.csv\", na=\"\")   usethis::use_data(ppts_easia_weuro_world_pchg, overwrite = TRUE) }"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emily Hannum. Author. Jeonghyeok Kim. Author. Fan Wang. Author, maintainer.","code":""},{"path":"https://fanwangecon.github.io/PrjCompPPTS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hannum E, Kim J, Wang F (2024). PrjCompPPTS: Global changes school age popultion, teachers, schools. R package version 0.0.0.9000,  https://fanwangecon.github.io/PrjCompPPTS/, https://github.com/FanWangEcon/PrjCompPPTS.","code":"@Manual{,   title = {PrjCompPPTS: Global changes in school age popultion, teachers, and schools},   author = {Emily Hannum and Jeonghyeok Kim and Fan Wang},   year = {2024},   note = {R package version 0.0.0.9000,  https://fanwangecon.github.io/PrjCompPPTS/},   url = {https://github.com/FanWangEcon/PrjCompPPTS}, }"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/reference/ppts_easia_weuro_world.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel data on school age population, students, teachers, and schools — ppts_easia_weuro_world","title":"Panel data on school age population, students, teachers, and schools — ppts_easia_weuro_world","text":"Annual data available different time frames across countries. Data school age population teachers available globally. Data school age population, teachers schools available Western European Eastern Asian countries.","code":""},{"path":"https://fanwangecon.github.io/PrjCompPPTS/reference/ppts_easia_weuro_world.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel data on school age population, students, teachers, and schools — ppts_easia_weuro_world","text":"","code":"ppts_easia_weuro_world"},{"path":"https://fanwangecon.github.io/PrjCompPPTS/reference/ppts_easia_weuro_world.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Panel data on school age population, students, teachers, and schools — ppts_easia_weuro_world","text":"data frame 9 rows 5 variables: Country Country name countrycode Three letter country code countrycode Values equal nationwide, urban non-urban Korea stats_youthpop Youth population age 0 15 stats_student Number students primary school stats_teacher Number teachers primary school stats_school Number primary schools stats_gdp Annual GDP stats_enroll_ratio Primary school enrollment ratio","code":""},{"path":"https://fanwangecon.github.io/PrjCompPPTS/reference/ppts_easia_weuro_world.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Panel data on school age population, students, teachers, and schools — ppts_easia_weuro_world","text":"https://fanwangecon.github.io/","code":""},{"path":"https://fanwangecon.github.io/PrjCompPPTS/reference/ppts_easia_weuro_world.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Panel data on school age population, students, teachers, and schools — ppts_easia_weuro_world","text":"Aggregate national countries except case Korea. Korea, -country data aggregated compare metropolitan non-metropolitan areas. Also data available Korea regions","code":""},{"path":"https://fanwangecon.github.io/PrjCompPPTS/reference/ppts_easia_weuro_world.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panel data on school age population, students, teachers, and schools — ppts_easia_weuro_world","text":"","code":"data(ppts_easia_weuro_world) print(ppts_easia_weuro_world) #> # A tibble: 17,637 × 10 #>    location_name location_code location_level  year stats_youthpop stats_student #>    <fct>         <fct>         <fct>          <dbl>          <dbl>         <dbl> #>  1 Aruba         ABW           country         1960          23769            NA #>  2 Aruba         ABW           country         1961          24035            NA #>  3 Aruba         ABW           country         1962          24139            NA #>  4 Aruba         ABW           country         1963          24091            NA #>  5 Aruba         ABW           country         1964          23924            NA #>  6 Aruba         ABW           country         1965          23683            NA #>  7 Aruba         ABW           country         1966          23479            NA #>  8 Aruba         ABW           country         1967          23160            NA #>  9 Aruba         ABW           country         1968          22773            NA #> 10 Aruba         ABW           country         1969          22398            NA #> # ℹ 17,627 more rows #> # ℹ 4 more variables: stats_teacher <dbl>, stats_school <dbl>, stats_gdp <dbl>, #> #   stats_enroll_ratio <dbl>"}]
